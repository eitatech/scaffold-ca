package {{package}}.binstash.config

import tech.eita.binstash.model.api.ObjectCache
import org.springframework.context.annotation.Bean
{{#include-local}}
import tech.eita.binstash.LocalCacheFactory
{{/include-local}}
{{#include-centralized}}
import tech.eita.binstash.CentralizedCacheFactory
{{/include-centralized}}
{{#include-hibrid}}
import tech.eita.binstash.HybridCacheFactory
import tech.eita.binstash.model.SyncRule
import java.util.Collections
import java.util.List
{{/include-hibrid}}

@Configuration
open class BinStashConfiguration {

    {{#include-local}}
    @Bean
    open fun objectCache(localCacheFactory: LocalCacheFactory<Any?>): ObjectCache<Any?>? {
        return localCacheFactory.newObjectCache()
    }
    {{/include-local}}

    {{#include-centralized }}
    @Bean
    open fun objectCache(centralizedCacheFactory: CentralizedCacheFactory<Any?>): ObjectCache<Any?>? {
        return centralizedCacheFactory.newObjectCache()
    }
    {{/include-centralized }}

    {{#include-hybrid}}
    @Bean
    open fun cacheSyncRules(): List<SyncRule?>? {
        val simpleSyncRule = SyncRule { keyArg, syncType -> true }
        return Collections.singletonList(simpleSyncRule)
    }

    @Bean
    fun objectCache(
        cacheFactory: HybridCacheFactory<Any?>,
        cacheSyncRules: List<SyncRule?>?
    ): ObjectCache<Any?>? {
        return cacheFactory.newObjectCache(cacheSyncRules)
    }
    {{/include-hybrid}}


}