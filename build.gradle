/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.3/userguide/custom_plugins.html
 */

buildscript {

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.7"
        classpath "gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.9"
    }
}

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    id 'jacoco'
    id 'idea'
    id 'com.gradle.plugin-publish' version '0.11.0'
    id "org.sonarqube" version "3.0"
    id 'maven-publish'
    id "com.github.sherter.google-java-format" version "0.9"
}
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/eitatech/scaffold-ca")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
group 'tech.eita.cleanArchitecture'

version System.getProperty('version')

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenCentral()
}

dependencies {
    api 'com.github.spullara.mustache.java:compiler:0.9.10'
    api 'com.fasterxml.jackson.core:jackson-databind:2.13.2.2'
    api 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.2'
    api 'commons-io:commons-io:2.11.0'
    api gradleApi()
    testImplementation 'org.mockito:mockito-core:4.3.1'
    testImplementation 'junit:junit:4.13.2'
    testImplementation gradleTestKit()

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.3'
}

gradlePlugin {
    // Define the plugin
    plugins {
        cleanArchitecture {
            id = 'tech.eita.cleanArchitecture'
            displayName = 'EITA! - Scaffold Clean Architecture'
            description = 'Gradle plugin to create a clean application in Java that already works, It follows our best practices!'
            implementationClass = 'tech.eita.PluginClean'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

pluginBundle {
    website = 'https://github.com/eitatech/scaffold-ca'
    vcsUrl = 'https://github.com/eitatech/scaffold-ca'
    tags = ['gradle', 'plugin', 'scaffold', 'cleanArchitecture', 'Eita', 'OpenSource']
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        csv.enabled false
    }
}

sonarqube {
    properties {
        property "sonar.organization", "eita"
        property "sonar.projectKey", "eita_scaffold-ca"
        property "sonar.host.url", "https://sonarcloud.io/"

        property "sonar.sources", "."
        property "sonar.java.binaries", "build/classes"
        property "sonar.junit.reportPaths", "build/test-results/test"
        property "sonar.java-coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/report.xml"
        property "sonar.test", "src/test/java"
        property "sonar.exclusions", ".github/**,src/functionalTest/**,src/test/**/*Test.java,**/**models**,src/test/**/*Provider.java,**/**exceptions**,**/examples-ca/**"
        property "sonar.sourceEncoding", "UTF-8"
    }
}

googleJavaFormat {
    toolVersion = "1.7"
    exclude '**/examples-ca/**'
}

////////////////////////////////////////////////////////////////////////
//
//  Google Java Format pre-commit hook installation
//

tasks.register('installGitHooks', Copy) {
    from(file('config/hooks/pre-commit')) {
        rename 'pre-commit', 'pre-commit'
    }
    into file('.git/hooks')
    fileMode 0777
}

tasks.named('wrapper') {
    gradleVersion = '6.9.1'
}

